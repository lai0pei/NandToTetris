// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    //for jump
    And(a=instruction[15],b=instruction[0],out=inst0);
    And(a=instruction[15],b=instruction[1],out=inst1);
    And(a=instruction[15],b=instruction[2],out=inst2);
    //for store
    And(a=instruction[15],b=instruction[3],out=inst3);
    And(a=instruction[15],b=instruction[4],out=inst4);
    And(a=instruction[15],b=instruction[5],out=inst5);
    //For alu
    And(a=instruction[15],b=instruction[6],out=inst6);
    And(a=instruction[15],b=instruction[7],out=inst7);
    And(a=instruction[15],b=instruction[8],out=inst8);
    And(a=instruction[15],b=instruction[9],out=inst9);
    And(a=instruction[15],b=instruction[10],out=inst10);
    And(a=instruction[15],b=instruction[11],out=inst11);
    And(a=instruction[15],b=instruction[12],out=inst12);


    Not(in=instruction[15],out=isARegister);
    Or(a=inst5,b=isARegister,out=saveRegister);

    //select instruction
    Mux16(a=instruction,b=AluOut,sel=instruction[15],out=ARegisterData);
    ARegister(in=ARegisterData,load=saveRegister,out=ARegisterOut);

    Mux16(a=ARegisterOut,b=inM,sel=inst12,out=YRegister);
    ALU(x=DRegisterOut,y=YRegister,zx=inst11,nx=inst10,zy=inst9,ny=inst8,f=inst7,no=inst6,out=AluOut,zr=zr,ng=ng);
    DRegister(in=AluOut,load=inst4,out=DRegisterOut);

    Or(a=isARegister,b=inst3,out=iswrite);
    Or16(a=ARegisterOut,b=false,out[0..14]=addressM);
    Mux16(a=false,b=AluOut,sel=inst3,out=outM);
    //write value or not
    And(a=true,b=inst3,out=writeM);

    //program counter
    Or(a=zr,b=ng,out=gtout);
    Not(in=gtout,out=gt);

    And(a=inst0,b=gt,out=jump1);
    And(a=inst1,b=zr,out=jump2);
    And(a=inst2,b=ng,out=jump3);
    Or(a=jump1,b=jump2,out=tmpj);
    Or(a=tmpj,b=jump3,out=isjump);
    PC(in=ARegisterOut,inc=true,load=isjump,reset=reset,out[0..14]=pc);
    
}