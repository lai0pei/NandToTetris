// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    Mux16(a=x,b=false,sel=zx,out=xout);
    Not16(in=xout,out=notx);
    Mux16(a=xout,b=notx,sel=nx,out=fx);

    Mux16(a=y,b=false,sel=zy,out=yout);
    Not16(in=yout,out=noty);
    Mux16(a=yout,b=noty,sel=ny,out=fy);

    Add16(a=fx,b=fy,out=addout);
    And16(a=fx,b=fy,out=andout);
    Mux16(a=andout,b=addout,sel=f,out=xyout);

    Not16(in=xyout,out=notxy);
    Mux16(a=xyout,b=notxy,sel=no,out=tmpout);
    Or16(a=false,b=tmpout,out=out);

    And16(a=true,b=tmpout,out[15]=ng);

    
    And16(a=true,b=tmpout,out[0]=o0,out[1]=o1,out[2]=o2,out[3]=o3,out[4]=o4,out[5]=o5,out[6]=o6,out[7]=o7,out[8]=o8,out[9]=o9,out[10]=o10,out[11]=o11,out[12]=o12,out[13]=o13,out[14]=o14,out[15]=o15);
    Or(a=o0,b=o1,out=aout0);
    Or(a=o2,b=aout0,out=aout1);
    Or(a=o3,b=aout1,out=aout2);
    Or(a=o4,b=aout2,out=aout3);
    Or(a=o5,b=aout3,out=aout4);
    Or(a=o6,b=aout4,out=aout5);
    Or(a=o7,b=aout5,out=aout6);
    Or(a=o8,b=aout6,out=aout7);
    Or(a=o9,b=aout7,out=aout8);
    Or(a=o10,b=aout8,out=aout9);
    Or(a=o11,b=aout9,out=aout10);
    Or(a=o12,b=aout10,out=aout11);
    Or(a=o13,b=aout11,out=aout12);
    Or(a=o14,b=aout12,out=aout13);
    Or(a=o15,b=aout13,out=aout14);
    Not(in=aout14,out=zr);
    

   
}